import cv2
import numpy as np
from model import FacialExpressionModel
from keras.models import load_model
import streamlit as st
from keras.preprocessing.image import img_to_array
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
import io
from recognation import VideoCamera

model = FacialExpressionModel()

facec = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
font = cv2.FONT_HERSHEY_SIMPLEX

all_emo = ["Angry", "Disgust", "Fear", "Happy", "Neutral", "Sad", "Surprise"]


class VideoTransformer(VideoTransformerBase):
    def __init__(self, vid):
        self.video = cv2.VideoCapture(vid)
    
    def transform(self, frame):
        img = self.video.read()
        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = facec.detectMultiScale(
            image=img_gray, scaleFactor=1.3, minNeighbors=5)
        for (x, y, w, h) in faces:
            roi_gray = img_gray[y:y + h, x:x + w]
            roi_gray = cv2.resize(roi_gray, (48, 48))
            finalout = model.predict_emotion(roi_gray[np.newaxis, :, :, np.newaxis])
            output = str(finalout)    
            label_position = (x, y)
            cv2.putText(img, output, label_position, cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.rectangle(img, (x, y),(x + w, y + h),(0,255,0),2)
        return img



def main():
    st.title("–ü–ü ¬´–í—Å–µ–≤–∏–¥—è—â–µ–µ –æ–∫–æüëÅ‚Äçüó®¬ª")
    activiteis = ["–ì–ª–∞–≤–Ω–∞—è", "–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π", "–¢–µ—Å—Ç",  "–û –Ω–∞—Å"]
    choice = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫–Ω–æ", activiteis)
    st.sidebar.markdown(
        """ Developed by human for humans || GranIT‚ù§   
            Email : granitwithlove@gmail.com""")
    if choice == "–ì–ª–∞–≤–Ω–∞—è":
        html_temp_home1 = """<div style="background-color:#6D7B8D;padding:10px">
                                            <h4 style="color:white;text-align:center;">
                                            –ö–∞—Å–∫–∞–¥ –•–∞–∞—Ä–∞, tenserflow, streamlit, OpenCV, —Å–≤–µ—Ä—Ç–æ—á–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å </h4>
                                            </div>
                                            </br>"""
        st.markdown(html_temp_home1, unsafe_allow_html=True)
    elif choice == "–¢–µ—Å—Ç":
        html_temp_home1 = """<div style="background-color:#6D7B8D;padding:10px">
                                            <h4 style="color:white;text-align:center;">
                                            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è.</h4>
                                            </div>
                                            </br>"""
        vid = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª...")        
        if vid is not None:
            webrtc_streamer(key="example", video_transformer_factory=VideoTransformer('src/4.mp4'))    
        st.markdown(html_temp_home1, unsafe_allow_html=True)
    elif choice == "–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π":
        st.header("–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π —Å –∫–∞–º–µ—Ä—ã")
        st.write("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Start, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞.")
        webrtc_streamer(key="example", video_transformer_factory=VideoTransformer)

    elif choice == "–û –Ω–∞—Å":
        st.subheader("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        html_temp_about1= """<div style="background-color:#6D7B8D;padding:10px">
                                    <h4 style="color:white;text-align:center;">
                                    –ü–ü ¬´–í—Å–µ–≤–∏–¥—è—â–µ–µ –æ–∫–æüëÅ‚Äçüó®¬ª, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ</h4>
                                    </div>
                                    </br>"""
        st.markdown(html_temp_about1, unsafe_allow_html=True)

        html_temp4 = """
                             		<div style="background-color:#98AFC7;padding:10px">
                             		<h4 style="color:white;text-align:center;">–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π –ì—Ä–∞–ΩIT‚ù§</h4>
                             		</div>
                             		<br></br>
                             		<br></br>"""

        st.markdown(html_temp4, unsafe_allow_html=True)
    
    else:
        pass


if __name__ == "__main__":
    main()

